gunit Esql;


//
// Primitives
//
ID:
    "X" OK
    "XYZ" OK
    "Xyz" OK
    "XyZ" OK
    "_X" OK
    "1X" FAIL
INT:
    "1" OK

LITERAL:
    "'http://esql.ru'" OK

atom    :
   "10" -> "10"
   "\"Hello\"" -> "\"Hello\""
   "Var" -> "Var"
   "TRUE" -> "TRUE"
   "FALSE" -> "FALSE"
   "-10" -> (- 10)

sc_expr:
    "1 > 2" -> (> 1 2)
    "1 + 3 > 10" -> (> (+ 1 3) 10)
    "-1 > -2" -> ( > (- 1) (- 2))

concat_expr:
    "\"Hello\" || \", world\"" -> (|| "\"Hello\"" "\", world\"")

add_expr:
   "1 + 3" -> (+ 1 3)
   "3 - 1" -> (- 3 1)
   "1 + 2 + 3 - 4" -> (- (+ (+ 1 2) 3) 4)
   " a + x" -> (+ a x)
   "x + 10" -> ( + x 10)
   "(1 + 2) + (5 + 6)" -> ( + (+ 1 2) (+ 5 6))
   "(1 + x) + (x - 6)" -> ( + (+ 1 x) (- x 6))
   "1 - 3/4 + 5" -> (+ (- 1 (/ 3 4)) 5)
   "1 + 2 - (-3)" -> (- (+ 1 2) (- 3))

mult_expr:
    "5 * 6" -> (* 5 6)
    "6 / 10" -> (/ 6 10)
    "1 * 2 * 3 * 4" -> (* (* (* 1 2) 3) 4)
    "10 * -2" -> (* 10 (- 2))

logic_expr:
    "a > b AND x < y" -> (AND (> a b) (< x y))
    "NOT (a > b) = TRUE" -> "(= (NOT (> a b)) TRUE)"


var_ns_decl:
    "DECLARE sp1 NAMESPACE 'http://esql.ru'" -> (NS sp1) (INIT sp1 'http://esql.ru')
    "DECLARE sp1, sp2 SHARED NAMESPACE 'http://esql.ru'" -> (NS (sp1 SHARED)) (NS (sp2 SHARED)) (INIT sp1 'http://esql.ru') (INIT sp2 'http://esql.ru')
    "DECLARE sp1 NAME 'http://esql.ru'" -> (NS sp1) (INIT sp1 'http://esql.ru')

var_only_decl:
    "DECLARE deployEnvironment EXTERNAL CHARACTER" -> (VAR (deployEnvironment CHARACTER EXTERNAL))
    "DECLARE deployEnvironment INT" -> (VAR (deployEnvironment INT))
    "DECLARE sp1, sp2 SHARED INT" -> (VAR (sp1 INT SHARED)) (VAR (sp2 INT SHARED))

const_decl:
     "DECLARE deployEnvironment EXTERNAL CONSTANT CHARACTER 'XYZ'" -> (CONSTANT (deployEnvironment CHARACTER EXTERNAL)) (INIT deployEnvironment 'XYZ')

var_ctor_decl:
    "DECLARE v INT -10" -> (VAR (v INT)) (INIT v (- 10))

set_stat:
    "SET x = y" -> "(SET (= x y))"
    "SET s = -10" -> (SET (= s (- 10)))
    "SET s = 1 - 3/4 + 5 * 2/(1+1)" -> (SET (= s (+ (- 1 (/ 3 4)) (/ (* 5 2) (+ 1 1)))))

if_stat:
    "IF 10 = 15 THEN END IF" -> (IF (COND (= 10 15)))
    "IF z = TRUE THEN SET x = 3 + 2; END IF" -> (IF (COND (= z TRUE) (SET (= x (+ 3 2)))))

    <<
    IF 10 <= 15 THEN
       SET result = 'Good';
    ELSE
       SET result = 'Bad';
    END IF
     >> -> (IF (COND (<= 10 15) (SET (= result 'Good'))) (ELSE (SET (= result 'Bad'))))

    <<
    IF 10 <= 15 THEN
       SET result = 'Good';
    ELSEIF x = 10 THEN
       SET x = x + 1;
    END IF
    >>
    -> (IF (COND (<= 10 15) (SET (= result 'Good'))) (COND (= x 10) (SET (= x (+ x 1)))))

    <<
    IF 10 <= 15 THEN
       SET result = 'Good';
    ELSEIF x = 10 THEN
       SET x = x + 1;
    ELSE SET z = 0;
    END IF
    >>
    -> (IF (COND (<= 10 15) (SET (= result 'Good'))) (COND (= x 10) (SET (= x (+ x 1)))) (ELSE (SET (= z 0))))

ret_stat:
    "RETURN" -> "RETURN"
    "RETURN 10" -> (RETURN 10)

beginend_stat:
    "BEGIN END" -> "BEGIN"
    "x: BEGIN END x" -> (BEGIN (PROPS (LABEL x)))
    "x: BEGIN ATOMIC DECLARE v INT; END x" -> (BEGIN (PROPS (LABEL x) (ATOMICITY ATOMIC)) (VAR (v INT)))