gunit Esql;


//
// Primitives
//
IDENTIFIER:
    "X" OK
    "XYZ" OK
    "Xyz" OK
    "XyZ" OK
    "_X" OK
    "1X" FAIL
INTLITERAL:
    "1" OK

QUOTEDSTRING:
    "'http://esql.ru'" OK
    "''" OK

atom:
   "10" -> "10"
   "\"Hello\"" -> "\"Hello\""
   "Var" -> "Var"
   "TRUE" -> "TRUE"
   "FALSE" -> "FALSE"

unary_expr:
    "-10" -> (- 10)

sc_expr:
    "1 > 2" -> (> 1 2)
    "1 + 3 > 10" -> (> (+ 1 3) 10)
    "-1 > -2" -> ( > (- 1) (- 2))

between_expr:
    "x BETWEEN 10 AND 20" -> (BETWEEN x (AND 10 20))
    "x NOT BETWEEN 10 AND 20" -> (BETWEEN x NOT (AND 10 20))
    "1 + 2 BETWEEN 1 * 1 AND 10-4"->(BETWEEN (+ 1 2) (AND (* 1 1) (- 10 4)))

exists_expr:
    "EXISTS (1)" -> (EXISTS 1)

in_expr:
    "z IN (1, 2, 5)" -> (IN z 1 2 5)
    "z NOT IN (1, 2, 5)" -> (IN z NOT 1 2 5)

is_expr:
    "A IS NULL" -> (IS A NULL)
    "B IS NOT NULL" -> (IS B NOT NULL)
    "1 + 1 IS NOT NULL" -> (IS (+ 1 1) NOT NULL)

concat_expr:
    "\"Hello\" || \", world\"" -> (|| "\"Hello\"" "\", world\"")

add_expr:
   "1 + 3" -> (+ 1 3)
   "3 - 1" -> (- 3 1)
   "1 + 2 + 3 - 4" -> (- (+ (+ 1 2) 3) 4)
   "a + x" -> (+ a x)
   "x + 10" -> ( + x 10)
   "(1 + 2) + (5 + 6)" -> ( + (+ 1 2) (+ 5 6))
   "(1 + x) + (x - 6)" -> ( + (+ 1 x) (- x 6))
   "1 - 3/4 + 5" -> (+ (- 1 (/ 3 4)) 5)
   "1 + 2 - (-3)" -> (- (+ 1 2) (- 3))

mult_expr:
    "5 * 6" -> (* 5 6)
    "6 / 10" -> (/ 6 10)
    "1 * 2 * 3 * 4" -> (* (* (* 1 2) 3) 4)
    "10 * -2" -> (* 10 (- 2))

logic_expr:
    "a > b AND x < y" -> (AND (> a b) (< x y))

dot_expr:
    "OutputRoot.XMLNSC.Data.Order" -> (. (. (. OutputRoot XMLNSC) Data) Order)
    "OutputRoot.XML.{Value}" -> (. (. OutputRoot XML) ({ Value))

colon_expr:
    "ru.sbrf:schemaLocation" -> (: (. ru sbrf) schemaLocation)
    "InputRoot.XMLNSC.ns:event.ns:eventPointData.ns:eventData.ns:eventCorrelation.ns:localTransactionId"
    -> (: (: (: (: (: (. (. InputRoot XMLNSC) ns) (. event ns)) (. eventPointData ns)) (. eventData ns)) (. eventCorrelation ns)) localTransactionId)

arr_expr:
    "Order[2]" -> ([ Order 2)
    "Order[]" -> ([ Order)

like_expr:
    "Body.Trade.Company LIKE 'I%'" -> (LIKE (. (. Body Trade) Company) 'I%')
    "Body.Trade.Company NOT LIKE 'I%'" -> (LIKE (. (. Body Trade) Company) NOT 'I%')

singular_expr:
    "SINGULAR(OutputRoot.XML.TMessage.BillNo[])" -> (SINGULAR (. (. (. OutputRoot XML) TMessage) ([ BillNo)))


expression:
    "NOT (a > b) = TRUE" -> "(= (NOT (> a b)) TRUE)"
    "OutputRoot.XMLNS.Invoice.Purchases.Item[1];" -> (. (. (. (. OutputRoot XMLNS) Invoice) Purchases) ([ Item 1))
    "S.ACCOUNTNO = InputBody.AccountNumber" -> (= (. S ACCOUNTNO) (. InputBody AccountNumber))
    "x IN (1, 3, 5, 40)"-> (IN x 1 3 5 40)
    "SQLCode1 = SQLCODE" -> (= SQLCode1 (ESQL_FUNCTION_CALL SQLCODE))
    "SQLErrorText1 = SQLERRORTEXT" -> (= SQLErrorText1 (ESQL_FUNCTION_CALL SQLERRORTEXT))
    "SQLNativeError1 = SQLNATIVEERROR" -> (= SQLNativeError1 (ESQL_FUNCTION_CALL SQLNATIVEERROR))
    "SQLState1 = SQLSTATE" -> (= SQLState1 (ESQL_FUNCTION_CALL SQLSTATE))
    "ex.*[<].Number IS NOT NULL" -> (IS (. (. ex ([ * <)) Number) NOT NULL)

var_ns_decl:
    "DECLARE sp1 NAMESPACE 'http://esql.ru'" -> (NS sp1) (INIT sp1 'http://esql.ru')
    "DECLARE sp1, sp2 SHARED NAMESPACE 'http://esql.ru'" -> (NS (sp1 SHARED)) (NS (sp2 SHARED)) (INIT sp1 'http://esql.ru') (INIT sp2 'http://esql.ru')
    "DECLARE sp1 NAME 'http://esql.ru'" -> (NS sp1) (INIT sp1 'http://esql.ru')

var_only_decl:
    "DECLARE deployEnvironment EXTERNAL CHARACTER" -> (VAR (deployEnvironment CHARACTER EXTERNAL))
    "DECLARE deployEnvironment INT" -> (VAR (deployEnvironment INT))
    "DECLARE sp1, sp2 SHARED INT" -> (VAR (sp1 INT SHARED)) (VAR (sp2 INT SHARED))

const_decl:
     "DECLARE deployEnvironment EXTERNAL CONSTANT CHARACTER 'XYZ'" -> (CONSTANT (deployEnvironment CHARACTER EXTERNAL)) (INIT deployEnvironment 'XYZ')

var_ctor_decl:
    "DECLARE v INT -10" -> (VAR (v INT)) (INIT v (- 10))

set_stat:
    "SET x = y" -> "(SET (= x y))"
    "SET s = -10" -> (SET (= s (- 10)))
    "SET s = 1 - 3/4 + 5 * 2/(1+1)" -> (SET (= s (+ (- 1 (/ 3 4)) (/ (* 5 2) (+ 1 1)))))
    "SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'SettingsUpdateRq'"
    -> (SET (= (. (. (. (. OutputLocalEnvironment Destination) RouterList) ([ DestinationData 1)) labelName) 'SettingsUpdateRq'))

if_stat:
    "IF 10 = 15 THEN END IF" -> (IF (COND (= 10 15)))
    "IF z = TRUE THEN SET x = 3 + 2; END IF" -> (IF (COND (= z TRUE) (SET (= x (+ 3 2)))))
    "IF LAST(x) THEN END IF" -> (IF (COND (FCALL LAST (PARAMS x))))

    <<
    IF 10 <= 15 THEN
       SET result = 'Good';
    ELSE
       SET result = 'Bad';
    END IF
     >> -> (IF (COND (<= 10 15) (SET (= result 'Good'))) (ELSE (SET (= result 'Bad'))))

    <<
    IF 10 <= 15 THEN
       SET result = 'Good';
    ELSEIF x = 10 THEN
       SET x = x + 1;
    END IF
    >>
    -> (IF (COND (<= 10 15) (SET (= result 'Good'))) (COND (= x 10) (SET (= x (+ x 1)))))

    <<
    IF 10 <= 15 THEN
       SET result = 'Good';
       SET x = 0;
    ELSEIF x = 10 THEN
       SET x = x + 1;
    ELSE SET z = 0;
    END IF
    >>
    -> (IF (COND (<= 10 15) (SET (= result 'Good')) (SET (= x 0))) (COND (= x 10) (SET (= x (+ x 1)))) (ELSE (SET (= z 0))))

ret_stat:
    "RETURN" -> "RETURN"
    "RETURN 10" -> (RETURN 10)

beginend_stat:
    "BEGIN END" -> "BEGIN"
    "x: BEGIN END x" -> (BEGIN (PROPS (LABEL x)))
    "x: BEGIN ATOMIC DECLARE v INT; END x" -> (BEGIN (PROPS (LABEL x) (ATOMICITY ATOMIC)) (VAR (v INT)))

while_stat:
    <<
    WHILE x = TRUE DO
      SET z = z + 1;
    END WHILE;
    >>
    ->   (WHILE (COND (= x TRUE)) (SET(= z (+ z 1))))

    <<
    WHILE x BETWEEN 0 AND 10 DO
      SET z = z + 1;
    END WHILE;
    >>
    -> (WHILE (COND (BETWEEN x (AND 0 10))) (SET (= z (+ z 1))))

attach_stat:
    "ATTACH ref1 TO OutputRoot.XMLNSC.Data.Order[2] AS LASTCHILD" -> (ATTACH ref1 (. (. (. OutputRoot XMLNSC) Data) ([ Order 2)) LASTCHILD)

detach_stat:
    "DETACH ref1" -> (DETACH ref1)

call_stat:
    "CALL myProc1() INTO cursor" -> (CALL (FCALL myProc1) (INTO cursor))
    "CALL schema.myProc(10, 'X')" -> (CALL (FCALL (. schema myProc) (PARAMS 10 'X')))

case_stat:
    <<
    CASE 10 > 5
      WHEN TRUE THEN
        CALL procedure1(10);
        CALL procedure1(15);
      WHEN FALSE THEN
        CALL procedure2(5);
    END CASE
    >>
    -> (CASE (COND (> 10 5)) (WHEN TRUE (CALL (FCALL procedure1 (PARAMS 10))) (CALL (FCALL procedure1 (PARAMS 15)))) (WHEN FALSE (CALL (FCALL procedure2 (PARAMS 5)))))

    <<
    CASE
      WHEN 10 > 5 THEN
        CALL procedure1(10);
        CALL procedure1(15);
      ELSE
        CALL procedure2(5);
    END CASE
    >>
    -> (CASE (WHEN (> 10 5) (CALL (FCALL procedure1 (PARAMS 10))) (CALL (FCALL procedure1 (PARAMS 15)))) (ELSE (CALL (FCALL procedure2 (PARAMS 5)))))

create_stat:
    <<
    CREATE LASTCHILD OF OutputRoot DOMAIN('MRM')
       PARSE(inBitStream, inEncoding, inCCSID, 'DP3UK14002001',
             'TestCase', 'XML1', options)
    >> -> (CREATE LASTCHILD OutputRoot (DOMAIN 'MRM') (PROPS (PARSE inBitStream inEncoding inCCSID 'DP3UK14002001' 'TestCase' 'XML1' options)))

func_decl_stat:
    <<
      CREATE FUNCTION itsFunction()
    >> -> (FUNCTION itsFunction)

    <<
    CREATE PROCEDURE GetExcDescription(IN InputExcList REFERENCE, OUT sErrDescr CHARACTER, OUT sErrNumber CHARACTER)
    BEGIN
    END
    >> -> (PROCEDURE (GetExcDescription (PARAMS (REFERENCE InputExcList IN) (CHARACTER sErrDescr OUT) (CHARACTER sErrNumber OUT)) (BODY BEGIN)))

handler_stat:
    "DECLARE CONTINUE HANDLER FOR SQLSTATE LIKE '%' BEGIN END;"
     -> (HANDLER CONTINUE (FOR (LIKE SQLSTATE '%')) (BODY BEGIN))

     "DECLARE EXIT HANDLER FOR SQLSTATE VALUE 'SELECT * FROM DUMMY' BEGIN END;"
     -> (HANDLER EXIT (FOR (VALUE SQLSTATE 'SELECT * FROM DUMMY')) (BODY BEGIN))

     "DECLARE EXIT HANDLER FOR SQLSTATE 'SELECT * FROM DUMMY' BEGIN END;"
     -> (HANDLER EXIT (FOR (SQLSTATE 'SELECT * FROM DUMMY')) (BODY BEGIN))

delete_from_stat:
    "DELETE FROM DATABASE.SHAREHOLDINGS AS S WHERE S.ACCOUNTNO = InputBody.AccountNumber"
    ->(DELETE (DATABASE SHAREHOLDINGS) (AS S) (WHERE (= (. S ACCOUNTNO) (. InputBody AccountNumber))))
    "DELETE FROM DATABASE.{Source}.{Schema}.{Table}" -> (DELETE (DATABASE (. (. ({ Source) ({ Schema)) ({ Table))))


delete_stat:
    "DELETE FIELD OutputRoot.XMLNS.Data.Folder1.Folder12" -> (DELETE FIELD (. (. (. (. OutputRoot XMLNS) Data) Folder1) Folder12))
    "DELETE LASTCHILD OF Cursor" -> (DELETE LASTCHILD Cursor)

eval_stat:
    "EVAL('SET ' || scalarVar1 || ' = 2;')" -> (EVAL (|| (|| 'SET ' scalarVar1) ' = 2;'))

for_stat:
    <<
    FOR source AS Environment.SourceData.Folder[] DO
     SET i = i + 1;
    END FOR
    >>
    -> (FOR source (AS (. (. Environment SourceData) ([ Folder))) (SET (= i (+ i 1))))

insert_stat:
    "INSERT INTO DATABASE.{Source}.{Schema}.{Table} (Name, Value) VALUES ('Joe', 12)"
    ->(INSERT (DATABASE (. (. ({ Source) ({ Schema)) ({ Table))) (PARAMS Name Value) (VALUES 'Joe' 12))

iterate_stat:
    "ITERATE X" -> (ITERATE X)

leave_stat:
    "LEAVE X" -> (LEAVE X)

log_stat:
    "LOG EVENT SEVERITY 1 CATALOG 'BIPv600' MESSAGE 2951 VALUES(1,2,3,4)"
    -> (LOG (PROPS EVENT SEVERITY 1 CATALOG 'BIPv600' MESSAGE 2951) (VALUES 1 2 3 4))

    "LOG USER TRACE EXCEPTION VALUES(2951, 'DivideByZero')"
    -> (LOG (PROPS TRACE EXCEPTION) (VALUES 2951 'DivideByZero'))

loop_stat:
    <<
    X : LOOP
        SET i = i + 1;
    END LOOP X;
    >>
    -> (LOOP (PROPS X) (SET (= i (+ i 1))))

move_stat:
    "MOVE cursor FIRSTCHILD TYPE XML.Name.'Field1'" -> (MOVE cursor (FIRSTCHILD TYPE (. (. XML Name) 'Field1')))
    "MOVE sourceCursor NEXTSIBLING REPEAT TYPE NAME" -> (MOVE sourceCursor (REPEAT NEXTSIBLING TYPE NAME))

pass_stat:
    "PASSTHRU 'DROP TABLE Shop.Customers' TO DATABASE.DSN1" -> (PASSTHRU 'DROP TABLE Shop.Customers' (TO (DATABASE DSN1)))
    "PASSTHRU(myVar)" -> (PASSTHRU myVar)

propagate_stat:
    "PROPAGATE" -> "PROPAGATE"

module_stat:
    <<
    CREATE COMPUTE MODULE name

    END MODULE
    >>    -> (MODULE name COMPUTE)

repeat_stat:
    <<
    X : REPEAT
      SET i = i + 1;
    UNTIL
       i>= 3
    END REPEAT X
    >>
    -> (REPEAT (PROPS X) (>= i 3) (SET (= i (+ i 1))))

resignal_stat:
    "RESIGNAL" -> "RESIGNAL"

throw_stat:
    "THROW USER EXCEPTION" -> (THROW (PROPS USER))
    "THROW USER EXCEPTION CATALOG 'BIPv600' MESSAGE 2951 VALUES(1,2,3,4,5,6,7,8)"
    -> (THROW (PROPS USER (CATALOG 'BIPv600') (MESSAGE 2951)) (VALUES 1 2 3 4 5 6 7 8))

upd_stat:
  "UPDATE DATABASE.StockPrices AS SP SET PRICE = InputBody.Message.StockPrice"
  -> (UPDATE (DATABASE StockPrices) (AS SP) (SET (INIT PRICE (. (. InputBody Message) StockPrice))))
  "UPDATE DATABASE.StockPrices AS SP SET PRICE = InputBody.Message.StockPrice WHERE SP.COMPANY = InputBody.Message.Company"
  -> (UPDATE (DATABASE StockPrices) (AS SP) (SET (INIT PRICE (. (. InputBody Message) StockPrice))) (WHERE (= (. SP COMPANY) (. (. InputBody Message) Company))))

statement:
    "SET SQLCode1 = SQLCODE;" -> (SET (= SQLCode1 (ESQL_FUNCTION_CALL SQLCODE)))
    "SET SQLErrorText1 = SQLERRORTEXT;" -> (SET (= SQLErrorText1 (ESQL_FUNCTION_CALL SQLERRORTEXT)))
    "SET SQLNativeError1 = SQLNATIVEERROR;" -> (SET (= SQLNativeError1 (ESQL_FUNCTION_CALL SQLNATIVEERROR)))
    "SET SQLState1 = SQLSTATE;" -> (SET (= SQLState1 (ESQL_FUNCTION_CALL SQLSTATE)))

fcall_expr:
    "Test()" -> (FCALL Test)
    "Test(1 + 2, 'x', y)" -> (FCALL Test (PARAMS (+ 1 2) 'x' y))

f_extract:
    "EXTRACT (YEAR FROM '29.01.2011')" -> (ESQL_FUNCTION_CALL (EXTRACT YEAR '29.01.2011'))
    "EXTRACT (YEAR FROM CURRENT_DATE)" -> (ESQL_FUNCTION_CALL (EXTRACT YEAR (ESQL_FUNCTION_CALL CURRENT_DATE)))
    "EXTRACT (MINUTE FROM CURRENT_TIME)" -> (ESQL_FUNCTION_CALL (EXTRACT MINUTE (ESQL_FUNCTION_CALL CURRENT_TIME)))
    "EXTRACT (MINUTE FROM CURRENT_TIMESTAMP)" -> (ESQL_FUNCTION_CALL (EXTRACT MINUTE (ESQL_FUNCTION_CALL CURRENT_TIMESTAMP)))
    "EXTRACT (MINUTE FROM CURRENT_GMTDATE)" -> (ESQL_FUNCTION_CALL (EXTRACT MINUTE (ESQL_FUNCTION_CALL CURRENT_GMTDATE)))
    "EXTRACT (MINUTE FROM CURRENT_GMTTIME)" -> (ESQL_FUNCTION_CALL (EXTRACT MINUTE (ESQL_FUNCTION_CALL CURRENT_GMTTIME)))
    "EXTRACT (MINUTE FROM CURRENT_GMTTIMESTAMP)" -> (ESQL_FUNCTION_CALL (EXTRACT MINUTE (ESQL_FUNCTION_CALL CURRENT_GMTTIMESTAMP)))
    "EXTRACT (MINUTE FROM LOCAL_TIMEZONE)" -> (ESQL_FUNCTION_CALL (EXTRACT MINUTE (ESQL_FUNCTION_CALL LOCAL_TIMEZONE)))

f_round:
    "ROUND(5, 0 MODE ROUND_DOWN)" -> (ESQL_FUNCTION_CALL ROUND 5 0 ROUND_DOWN)

f_overlay:
    "OVERLAY ('ABCDEFGHIJ' PLACING '1234' FROM 4 FOR 3)" -> (ESQL_FUNCTION_CALL (OVERLAY 'ABCDEFGHIJ' '1234' (PROPS 4 3)))

f_position:
    "POSITION('Town' IN 'Hursley Village')" -> (ESQL_FUNCTION_CALL (POSITION 'Town' 'Hursley Village'))
    "POSITION ('B' IN 'ABCABCABCABCABC' REPEAT 2)" -> (ESQL_FUNCTION_CALL (POSITION 'B' 'ABCABCABCABCABC' (REPEAT 2)))
    "POSITION ('BC' IN 'ABCABCABCABCABC' FROM 2 REPEAT -3)" -> (ESQL_FUNCTION_CALL (POSITION 'BC' 'ABCABCABCABCABC' (FROM 2) (REPEAT (- 3))))

f_substring:
     "SUBSTRING('Hello World!' FROM 7 FOR 4)" -> (ESQL_FUNCTION_CALL SUBSTRING (FROM 7) 4)

f_trim:
     "TRIM(TRAILING 'b' FROM 'aaabBb')" -> (ESQL_FUNCTION_CALL TRIM 'aaabBb' TRAILING 'b' FROM)
     "TRIM('a')" -> (ESQL_FUNCTION_CALL TRIM 'a')
     "TRIM( whiteSpace FROM input2)" -> (ESQL_FUNCTION_CALL TRIM input2 whiteSpace FROM)

f_asbitstream:
     "ASBITSTREAM(cursor OPTIONS options CCSID 1208)" -> (ESQL_FUNCTION_CALL ASBITSTREAM cursor (OPTIONS options) (CCSID 1208))

f_for:
     "FOR ALL Body.Invoice.Purchases.Item[] AS I (I.Quantity <= 50)"
     -> (ESQL_FUNCTION_CALL FOR PROPS (PARAMS (AS (. (. (. Body Invoice) Purchases) ([ Item)) I)) (<= (. I Quantity) 50))

f_case:
    <<
    CASE CurrentMonth
      WHEN '01' THEN 'January'
      WHEN '02' THEN 'February'
      WHEN '03' THEN 'March'
      WHEN '04' THEN 'April'
      WHEN '05' THEN 'May'
      WHEN '06' THEN 'June'
      ELSE 'Second half of year'
    END
    >>
    -> (ESQL_FUNCTION_CALL CASE CurrentMonth (WHEN '01' 'January') (WHEN '02' 'February') (WHEN '03' 'March') (WHEN '04' 'April') (WHEN '05' 'May') (WHEN '06' 'June') (ELSE 'Second half of year'))

    <<
    CASE
      WHEN Month = '01' THEN 'January'
      WHEN Month = '02' THEN 'February'
      WHEN Month = '03' THEN 'March'
      WHEN Month = '04' THEN 'April'
      WHEN Month = '05' THEN 'May'
      WHEN Month = '06' THEN 'June'
      ELSE 'Second half of year'
    END
    >>
    -> (ESQL_FUNCTION_CALL CASE (WHEN (= Month '01') 'January') (WHEN (= Month '02') 'February') (WHEN (= Month '03') 'March') (WHEN (= Month '04') 'April') (WHEN (= Month '05') 'May') (WHEN (= Month '06') 'June') (ELSE 'Second half of year'))

f_cast:
    "CAST(source AS CHARACTER FORMAT pattern)" -> (ESQL_FUNCTION_CALL CAST source CHARACTER (PROPS (FORMAT pattern)))

f_select:
    "SELECT P.PartNumber, P.Description, P.Price FROM Database.DSN1.Shop.Parts AS P"
    -> (ESQL_FUNCTION_CALL SELECT (. P PartNumber) (. P Description) (. P Price) (FROM (AS (. (. (. Database DSN1) Shop) Parts) P)))
    "SELECT * FROM Database.Datasource.SchemaName.Table As A"
    -> (ESQL_FUNCTION_CALL SELECT * (FROM (. (. (. Database Datasource) SchemaName) Table)))

f_row:
    "ROW('granary' AS bread,'riesling' AS wine, 'stilton' AS cheese)" -> (ESQL_FUNCTION_CALL ROW (AS 'granary' bread) (AS 'riesling' wine) (AS 'stilton' cheese))

f_list:
    "LIST{'Henri','McGough','Patten'}" -> (ESQL_FUNCTION_CALL LIST 'Henri' 'McGough' 'Patten')

f_passthru:
     "PASSTHRU('SELECT R.* FROM Schema1.Table1 AS R WHERE R.Name = ? OR R.Name = ? ORDER BY Name' TO DATABASE.DSN1 VALUES ('1', '2'))"
     -> (ESQL_FUNCTION_CALL PASSTHRU (PARAMS 'SELECT R.* FROM Schema1.Table1 AS R WHERE R.Name = ? OR R.Name = ? ORDER BY Name') (TO (DATABASE DSN1)) (VALUES '1' '2'))